/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNet {

using System;
using System.Runtime.InteropServices;

public class RakNet {
 
	    public static readonly SystemAddress UNASSIGNED_SYSTEM_ADDRESS = new SystemAddress();
	    public static readonly RakNetGUID UNASSIGNED_RAKNET_GUID = new RakNetGUID(ulong.MaxValue);

	    public static void StatisticsToString(RakNetStatistics s, out string buffer, int verbosityLevel) 
 	   {
		String tmp = new String('c', 9999);
		buffer=StatisticsToStringHelper(s,tmp,verbosityLevel);
 	   }
	
  public static string StatisticsToStringHelper(RakNetStatistics s, string buffer, int verbosityLevel) {
    string ret = RakNetPINVOKE.CSharp_StatisticsToStringHelper(RakNetStatistics.getCPtr(s), buffer, verbosityLevel);
    return ret;
  }

  public static int MAX_RPC_MAP_SIZE {
    get {
      int ret = RakNetPINVOKE.CSharp_MAX_RPC_MAP_SIZE_get();
      return ret;
    } 
  }

  public static int UNDEFINED_RPC_INDEX {
    get {
      int ret = RakNetPINVOKE.CSharp_UNDEFINED_RPC_INDEX_get();
      return ret;
    } 
  }

  public static bool NonNumericHostString(string host) {
    bool ret = RakNetPINVOKE.CSharp_NonNumericHostString(host);
    return ret;
  }

  public static ushort UNASSIGNED_PLAYER_INDEX {
    get {
      ushort ret = RakNetPINVOKE.CSharp_UNASSIGNED_PLAYER_INDEX_get();
      return ret;
    } 
  }

  public static ulong UNASSIGNED_NETWORK_ID {
    get {
      ulong ret = RakNetPINVOKE.CSharp_UNASSIGNED_NETWORK_ID_get();
      return ret;
    } 
  }

  public static int PING_TIMES_ARRAY_SIZE {
    get {
      int ret = RakNetPINVOKE.CSharp_PING_TIMES_ARRAY_SIZE_get();
      return ret;
    } 
  }

  public static RakString OpPlus(RakString lhs, RakString rhs) {
    RakString ret = new RakString(RakNetPINVOKE.CSharp_OpPlus(RakString.getCPtr(lhs), RakString.getCPtr(rhs)), true);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint MAX_UNSIGNED_LONG {
    get {
      uint ret = RakNetPINVOKE.CSharp_MAX_UNSIGNED_LONG_get();
      return ret;
    } 
  }

  public static ulong GetTime() {
    ulong ret = RakNetPINVOKE.CSharp_GetTime();
    return ret;
  }

  public static uint GetTimeMS() {
    uint ret = RakNetPINVOKE.CSharp_GetTimeMS();
    return ret;
  }

  public static ulong GetTimeUS() {
    ulong ret = RakNetPINVOKE.CSharp_GetTimeUS();
    return ret;
  }

  public static bool GreaterThan(ulong a, ulong b) {
    bool ret = RakNetPINVOKE.CSharp_GreaterThan(a, b);
    return ret;
  }

  public static bool LessThan(ulong a, ulong b) {
    bool ret = RakNetPINVOKE.CSharp_LessThan(a, b);
    return ret;
  }

  public static readonly int SWIG_CSHARP_NO_IMCLASS_STATIC_CONSTRUCTOR = RakNetPINVOKE.CSharp_SWIG_CSHARP_NO_IMCLASS_STATIC_CONSTRUCTOR_get();
  public static readonly int __GET_TIME_64BIT = RakNetPINVOKE.CSharp___GET_TIME_64BIT_get();
  public static readonly int MAX_ALLOCA_STACK_ALLOCATION = RakNetPINVOKE.CSharp_MAX_ALLOCA_STACK_ALLOCATION_get();
  public static readonly int _USE_RAK_MEMORY_OVERRIDE = RakNetPINVOKE.CSharp__USE_RAK_MEMORY_OVERRIDE_get();
  public static readonly int OPEN_SSL_CLIENT_SUPPORT = RakNetPINVOKE.CSharp_OPEN_SSL_CLIENT_SUPPORT_get();
  public static readonly int BITSTREAM_STACK_ALLOCATION_SIZE = RakNetPINVOKE.CSharp_BITSTREAM_STACK_ALLOCATION_SIZE_get();
  public static readonly int MAXIMUM_NUMBER_OF_INTERNAL_IDS = RakNetPINVOKE.CSharp_MAXIMUM_NUMBER_OF_INTERNAL_IDS_get();
  public static readonly int DATAGRAM_MESSAGE_ID_ARRAY_LENGTH = RakNetPINVOKE.CSharp_DATAGRAM_MESSAGE_ID_ARRAY_LENGTH_get();
  public static readonly int RESEND_BUFFER_ARRAY_LENGTH = RakNetPINVOKE.CSharp_RESEND_BUFFER_ARRAY_LENGTH_get();
  public static readonly int RESEND_BUFFER_ARRAY_MASK = RakNetPINVOKE.CSharp_RESEND_BUFFER_ARRAY_MASK_get();
  public static readonly int GET_TIME_SPIKE_LIMIT = RakNetPINVOKE.CSharp_GET_TIME_SPIKE_LIMIT_get();
  public static readonly int USE_SLIDING_WINDOW_CONGESTION_CONTROL = RakNetPINVOKE.CSharp_USE_SLIDING_WINDOW_CONGESTION_CONTROL_get();
  public static readonly int PREALLOCATE_LARGE_MESSAGES = RakNetPINVOKE.CSharp_PREALLOCATE_LARGE_MESSAGES_get();
  public static readonly int RAKNET_SUPPORT_IPV6 = RakNetPINVOKE.CSharp_RAKNET_SUPPORT_IPV6_get();
  public static readonly int RAKSTRING_TYPE_IS_UNICODE = RakNetPINVOKE.CSharp_RAKSTRING_TYPE_IS_UNICODE_get();
  public static readonly int RPC4_GLOBAL_REGISTRATION_MAX_FUNCTIONS = RakNetPINVOKE.CSharp_RPC4_GLOBAL_REGISTRATION_MAX_FUNCTIONS_get();
  public static readonly int RPC4_GLOBAL_REGISTRATION_MAX_FUNCTION_NAME_LENGTH = RakNetPINVOKE.CSharp_RPC4_GLOBAL_REGISTRATION_MAX_FUNCTION_NAME_LENGTH_get();
  public static readonly int XBOX_BYPASS_SECURITY = RakNetPINVOKE.CSharp_XBOX_BYPASS_SECURITY_get();
  public static readonly int BUFFERED_PACKETS_PAGE_SIZE = RakNetPINVOKE.CSharp_BUFFERED_PACKETS_PAGE_SIZE_get();
  public static readonly int INTERNAL_PACKET_PAGE_SIZE = RakNetPINVOKE.CSharp_INTERNAL_PACKET_PAGE_SIZE_get();
  public static readonly int RAKPEER_USER_THREADED = RakNetPINVOKE.CSharp_RAKPEER_USER_THREADED_get();
  public static readonly int USE_ALLOCA = RakNetPINVOKE.CSharp_USE_ALLOCA_get();
  public static readonly int LIBCAT_SECURITY = RakNetPINVOKE.CSharp_LIBCAT_SECURITY_get();
  public static readonly int _RAKNET_SUPPORT_ConnectionGraph2 = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_ConnectionGraph2_get();
  public static readonly int _RAKNET_SUPPORT_DirectoryDeltaTransfer = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_DirectoryDeltaTransfer_get();
  public static readonly int _RAKNET_SUPPORT_FileListTransfer = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_FileListTransfer_get();
  public static readonly int _RAKNET_SUPPORT_FullyConnectedMesh = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_FullyConnectedMesh_get();
  public static readonly int _RAKNET_SUPPORT_FullyConnectedMesh2 = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_FullyConnectedMesh2_get();
  public static readonly int _RAKNET_SUPPORT_MessageFilter = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_MessageFilter_get();
  public static readonly int _RAKNET_SUPPORT_NatPunchthroughClient = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_NatPunchthroughClient_get();
  public static readonly int _RAKNET_SUPPORT_NatPunchthroughServer = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_NatPunchthroughServer_get();
  public static readonly int _RAKNET_SUPPORT_NatTypeDetectionClient = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_NatTypeDetectionClient_get();
  public static readonly int _RAKNET_SUPPORT_NatTypeDetectionServer = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_NatTypeDetectionServer_get();
  public static readonly int _RAKNET_SUPPORT_PacketLogger = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_PacketLogger_get();
  public static readonly int _RAKNET_SUPPORT_ReadyEvent = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_ReadyEvent_get();
  public static readonly int _RAKNET_SUPPORT_ReplicaManager3 = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_ReplicaManager3_get();
  public static readonly int _RAKNET_SUPPORT_Router2 = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_Router2_get();
  public static readonly int _RAKNET_SUPPORT_RPC4Plugin = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_RPC4Plugin_get();
  public static readonly int _RAKNET_SUPPORT_TeamBalancer = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_TeamBalancer_get();
  public static readonly int _RAKNET_SUPPORT_TeamManager = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_TeamManager_get();
  public static readonly int _RAKNET_SUPPORT_UDPProxyClient = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_UDPProxyClient_get();
  public static readonly int _RAKNET_SUPPORT_UDPProxyCoordinator = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_UDPProxyCoordinator_get();
  public static readonly int _RAKNET_SUPPORT_UDPProxyServer = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_UDPProxyServer_get();
  public static readonly int _RAKNET_SUPPORT_ConsoleServer = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_ConsoleServer_get();
  public static readonly int _RAKNET_SUPPORT_RakNetTransport = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_RakNetTransport_get();
  public static readonly int _RAKNET_SUPPORT_TelnetTransport = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_TelnetTransport_get();
  public static readonly int _RAKNET_SUPPORT_TCPInterface = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_TCPInterface_get();
  public static readonly int _RAKNET_SUPPORT_LogCommandParser = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_LogCommandParser_get();
  public static readonly int _RAKNET_SUPPORT_RakNetCommandParser = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_RakNetCommandParser_get();
  public static readonly int _RAKNET_SUPPORT_EmailSender = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_EmailSender_get();
  public static readonly int _RAKNET_SUPPORT_HTTPConnection = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_HTTPConnection_get();
  public static readonly int _RAKNET_SUPPORT_HTTPConnection2 = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_HTTPConnection2_get();
  public static readonly int _RAKNET_SUPPORT_PacketizedTCP = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_PacketizedTCP_get();
  public static readonly int _RAKNET_SUPPORT_TwoWayAuthentication = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_TwoWayAuthentication_get();
  public static readonly int _RAKNET_SUPPORT_CloudClient = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_CloudClient_get();
  public static readonly int _RAKNET_SUPPORT_CloudServer = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_CloudServer_get();
  public static readonly int _RAKNET_SUPPORT_DynDNS = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_DynDNS_get();
  public static readonly int _RAKNET_SUPPORT_Rackspace = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_Rackspace_get();
  public static readonly int _RAKNET_SUPPORT_FileOperations = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_FileOperations_get();
  public static readonly int _RAKNET_SUPPORT_UDPForwarder = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_UDPForwarder_get();
  public static readonly int _RAKNET_SUPPORT_StatisticsHistory = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_StatisticsHistory_get();
  public static readonly int _RAKNET_SUPPORT_LibVoice = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_LibVoice_get();
  public static readonly int _RAKNET_SUPPORT_RelayPlugin = RakNetPINVOKE.CSharp__RAKNET_SUPPORT_RelayPlugin_get();
  public static readonly string PRINTF_64_BIT_MODIFIER = RakNetPINVOKE.CSharp_PRINTF_64_BIT_MODIFIER_get();
  public static readonly int NETWORK_ID_MANAGER_HASH_LENGTH = RakNetPINVOKE.CSharp_NETWORK_ID_MANAGER_HASH_LENGTH_get();
  public static readonly int ALLOW_JOIN_ANY_AVAILABLE_TEAM = RakNetPINVOKE.CSharp_ALLOW_JOIN_ANY_AVAILABLE_TEAM_get();
  public static readonly int ALLOW_JOIN_SPECIFIC_TEAM = RakNetPINVOKE.CSharp_ALLOW_JOIN_SPECIFIC_TEAM_get();
  public static readonly int ALLOW_JOIN_REBALANCING = RakNetPINVOKE.CSharp_ALLOW_JOIN_REBALANCING_get();
  public static readonly int _TABLE_BPLUS_TREE_ORDER = RakNetPINVOKE.CSharp__TABLE_BPLUS_TREE_ORDER_get();
  public static readonly int _TABLE_MAX_COLUMN_NAME_LENGTH = RakNetPINVOKE.CSharp__TABLE_MAX_COLUMN_NAME_LENGTH_get();
  public static readonly int REMOTE_MAX_TEXT_INPUT = RakNetPINVOKE.CSharp_REMOTE_MAX_TEXT_INPUT_get();
  public static readonly int MESSAGE_FILTER_MAX_MESSAGE_ID = RakNetPINVOKE.CSharp_MESSAGE_FILTER_MAX_MESSAGE_ID_get();
}

}
